<?php
if (!defined('ABSPATH')) {
    die('Direct access forbidden.');
}

// Enable WordPress debug logging
if (!defined('WP_DEBUG_LOG')) {
    define('WP_DEBUG_LOG', true);
}

function log_message($message) {
    error_log(date('[Y-m-d H:i:s] ') . $message . "\n", 3, WP_CONTENT_DIR . '/debug.log');
}

// Enqueue parent and child styles
function child_enqueue_styles() {
    wp_enqueue_style('parent-style', get_template_directory_uri() . '/style.css');
    wp_enqueue_style('child-style', get_stylesheet_uri());
    log_message("Styles enqueued: parent-style and child-style");
}
add_action('wp_enqueue_scripts', 'child_enqueue_styles');

// Enqueue product comparison styles
function enqueue_product_comparison_styles() {
    if (is_singular('post') && has_post_format('product-comparison')) {
        wp_enqueue_style('product-comparison-style', get_stylesheet_directory_uri() . '/product-comparison.css', array(), filemtime(get_stylesheet_directory() . '/product-comparison.css'));
        log_message("Product comparison styles enqueued for post ID: " . get_the_ID());
    }
}
add_action('wp_enqueue_scripts', 'enqueue_product_comparison_styles');

// Register product comparison template
function register_product_comparison_template($templates) {
    $templates['single-product-comparison.php'] = 'Product Comparison';
    log_message("Product comparison template registered");
    return $templates;
}
add_filter('theme_post_templates', 'register_product_comparison_template');

function register_multiproduct_template($templates) {
    $templates['single-multiproduct.php'] = 'MultiProduct';
    log_message("MultiProduct template registered");
    return $templates;
}
add_filter('theme_post_templates', 'register_multiproduct_template');

add_action('admin_menu', 'enable_custom_fields_metabox');
function enable_custom_fields_metabox() {
    add_meta_box('postcustom', 'Custom Fields', 'post_custom_meta_box', 'post', 'normal', 'high');
}

// Set template for product comparison posts
function set_product_comparison_template($template) {
    if (is_singular('post')) {
        $template_slug = get_page_template_slug();
        if ($template_slug === 'single-product-comparison.php' || $template_slug === 'single-multiproduct.php') {
            $new_template = locate_template(array($template_slug));
            if (!empty($new_template)) {
                log_message("Template set for post ID: " . get_the_ID() . ", Template: " . $template_slug);
                return $new_template;
            } else {
                log_message("Template not found for post ID: " . get_the_ID() . ", Template: " . $template_slug);
            }
        }
    }
    return $template;
}


add_filter('single_template', 'set_product_comparison_template');


function enqueue_multiproduct_styles_scripts() {
    if (is_singular('post') && get_page_template_slug() === 'single-multiproduct.php') {
        wp_enqueue_style('multiproduct-style', get_stylesheet_directory_uri() . '/multiproduct.css', array(), filemtime(get_stylesheet_directory() . '/multiproduct.css'));
        wp_enqueue_script('multiproduct-script', get_stylesheet_directory_uri() . '/multiproduct.js', array('jquery'), filemtime(get_stylesheet_directory() . '/multiproduct.js'), true);
        log_message("MultiProduct styles and scripts enqueued for post ID: " . get_the_ID());
    }
}
add_action('wp_enqueue_scripts', 'enqueue_multiproduct_styles_scripts');

function register_custom_fields() {
    $custom_fields = array(
        'disclosure_top', 'Featured_Image', 'subtitle', 'benefits_nav_text',
        'ingredients_nav_text', 'top_5_nav_text', 'disclosure', 'benefits_title',
        'benefits_subtitle', 'benefits_content', 'usage_title', 'usage_content',
        'ingredients_to_look_for_title', 'ingredients_to_look_for_content',
        'ingredients_to_avoid_title', 'ingredients_to_avoid_content',
        'considerations_title', 'considerations_content', 'top_products_title',
	'num_products', 'results_disclaimer', 'citations_title', 'citations',
	'back_to_top_text', 'primary_color', 'secondary_color', 'tertiary_color'
    );

    foreach ($custom_fields as $field) {
        register_post_meta('post', $field, array(
            'show_in_rest' => true,
            'single' => true,
            'type' => 'string',
        ));
    }
        // Register product-specific custom fields
    $product_fields = array(
        'name', 'brand', 'link', 'image', 'image_width', 'rating_image',
        'rating', 'grade', 'pros', 'cons', 'bottom_line'
    );

    for ($i = 1; $i <= 5; $i++) {
        foreach ($product_fields as $field) {
            register_post_meta('post', "product_{$i}_{$field}", array(
                'show_in_rest' => true,
                'single' => true,
                'type' => 'string',
            ));
        }
    }
}
add_action('init', 'register_custom_fields');

function handle_custom_fields($post_id, $post, $update) {
    if ($post->post_type !== 'post') {
        return;
    }
	error_log("Handling custom fields for post ID: $post_id");

    log_message("Handling custom fields for post ID: $post_id");

    // Get the raw POST data
    $raw_data = file_get_contents('php://input');
    log_message("Raw POST data: " . $raw_data);
    $data = json_decode($raw_data, true);
	log_message("Decoded data: " . print_r($data, true));


    if (isset($data['meta']) && is_array($data['meta'])) {
        foreach ($data['meta'] as $key => $value) {
            update_post_meta($post_id, $key, wp_kses_post($value));
            log_message("Updated custom field '$key' for post ID: $post_id");

            // Handle featured image
            if ($key === 'featured_image' && !empty($value)) {
                $image_id = upload_image_from_url($value, $post_id);
                if ($image_id) {
                    set_post_thumbnail($post_id, $image_id);
                    log_message("Set featured image for post ID: $post_id");
                }
            }
        }
    } else {
        log_message("No meta data found in POST for post ID: $post_id");
    }
	$all_meta = get_post_meta($post_id);
    log_message("All post meta after update: " . print_r($all_meta, true));

    // Set post format to 'product-comparison'
    set_post_format($post_id, 'product-comparison');
    log_message("Set post format to 'product-comparison' for post ID: $post_id");

    // Set template to 'single-product-comparison.php'
    update_post_meta($post_id, '_wp_page_template', 'single-product-comparison.php');
    log_message("Set template to 'single-product-comparison.php' for post ID: $post_id");
}
add_action('rest_api_inserted_post', 'handle_custom_fields', 10, 3);


function upload_image_from_url($image_url, $post_id) {
    require_once(ABSPATH . 'wp-admin/includes/media.php');
    require_once(ABSPATH . 'wp-admin/includes/file.php');
    require_once(ABSPATH . 'wp-admin/includes/image.php');

    // Download file to temp dir
    $tmp = download_url($image_url);

    if (is_wp_error($tmp)) {
        log_message("Error downloading image: " . $tmp->get_error_message());
        return false;
    }

    $file_array = array(
        'name' => basename($image_url),
        'tmp_name' => $tmp
    );

    // Do the validation and storage stuff
    $id = media_handle_sideload($file_array, $post_id);

    // If error storing permanently, unlink
    if (is_wp_error($id)) {
        @unlink($file_array['tmp_name']);
        log_message("Error storing image: " . $id->get_error_message());
        return false;
    }

    return $id;
}
// Add product comparison format
function add_product_comparison_format() {
    add_theme_support('post-formats', array('product-comparison'));
    log_message("Product comparison post format added");
}
add_action('after_setup_theme', 'add_product_comparison_format');



//function display_all_post_meta() {
//   global $post;
//    $post_meta = get_post_meta($post->ID);
//    echo '<div style="background-color: #f0f0f0; padding: 15px; margin-top: 20px;">';
//    echo '<h3>All Post Meta:</h3>';
//    echo '<pre>' . print_r($post_meta, true) . '</pre>';
//    echo '</div>';
//}
//add_action('edit_form_after_title', 'display_all_post_meta');

// Helper function to get custom field with fallback
function get_custom_field($field, $fallback = '') {
    $value = get_post_meta(get_the_ID(), $field, true);
    log_message("Retrieved custom field '$field' for post ID: " . get_the_ID());
    return !empty($value) ? $value : $fallback;
}

// Log when a product comparison post is loaded
function log_product_comparison_post_load() {
    if (is_singular('post') && has_post_format('product-comparison')) {
        $post_id = get_the_ID();
        $template = get_page_template_slug($post_id);
        log_message("Product comparison post loaded - ID: {$post_id}, Template: {$template}");
    }
}
add_action('wp', 'log_product_comparison_post_load');

// Enqueue product review styles
function enqueue_product_review_styles() {
    if ( is_page_template( 'page-product-review.php' ) ) {
        wp_enqueue_style( 'product-review-style', get_template_directory_uri() . '/product-review.css' );
    }
}
add_action( 'wp_enqueue_scripts', 'enqueue_product_review_styles' );

// Add meta boxes for custom fields
function add_product_review_meta_boxes() {
    add_meta_box('product_review_meta', 'Product Review Details', 'product_review_meta_callback', 'page', 'normal', 'high');
}
add_action('add_meta_boxes', 'add_product_review_meta_boxes');

// Meta box callback function
function product_review_meta_callback($post) {
    wp_nonce_field('product_review_meta_box', 'product_review_meta_box_nonce');

    $intro = get_post_meta($post->ID, '_intro_paragraph', true);
    $main_image_id = get_post_meta($post->ID, '_main_image_id', true);
    $num_products = get_post_meta($post->ID, '_num_products', true) ?: 5;
    $product_reviews = get_post_meta($post->ID, '_product_reviews', true) ?: array();
    $conclusion = get_post_meta($post->ID, '_conclusion', true);
    $cta_text = get_post_meta($post->ID, '_cta_text', true);
    $cta_link = get_post_meta($post->ID, '_cta_link', true);

    ?>
    <p>
        <label for="intro_paragraph">Intro Paragraph:</label><br>
        <textarea id="intro_paragraph" name="intro_paragraph" rows="4" cols="50"><?php echo esc_textarea($intro); ?></textarea>
    </p>
    <p>
        <label for="main_image">Main Image:</label><br>
        <input type="hidden" id="main_image_id" name="main_image_id" value="<?php echo esc_attr($main_image_id); ?>">
        <button type="button" class="upload_image_button button">Upload Image</button>
        <div id="main_image_preview">
            <?php if ($main_image_id) echo wp_get_attachment_image($main_image_id, 'thumbnail'); ?>
        </div>
    </p>
    <p>
        <label for="num_products">Number of Products:</label>
        <input type="number" id="num_products" name="num_products" value="<?php echo esc_attr($num_products); ?>" min="1" max="10">
    </p>
    <div id="product_reviews">
        <h3>Product Reviews</h3>
        <?php
        for ($i = 0; $i < $num_products; $i++) {
            $review = isset($product_reviews[$i]) ? $product_reviews[$i] : array();
            $product_name = isset($review['product_name']) ? $review['product_name'] : '';
            $product_image_id = isset($review['product_image_id']) ? $review['product_image_id'] : '';
            $effectiveness = isset($review['effectiveness']) ? $review['effectiveness'] : '';
            $safety = isset($review['safety']) ? $review['safety'] : '';
            $price = isset($review['price']) ? $review['price'] : '';
            $overall_rating = isset($review['overall_rating']) ? $review['overall_rating'] : '';
            $product_description = isset($review['product_description']) ? $review['product_description'] : '';
            ?>
            <div class="product-review" <?php echo $i === 0 ? 'style="border: 2px solid #007cba; padding: 10px;"' : ''; ?>>
                <h4>Product <?php echo $i + 1; ?><?php echo $i === 0 ? ' (Best Product)' : ''; ?></h4>
                <p>
                    <label>Product Name:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][product_name]" value="<?php echo esc_attr($product_name); ?>">
                </p>
                <p>
                    <label>Product Image:</label><br>
                    <input type="hidden" name="product_reviews[<?php echo $i; ?>][product_image_id]" value="<?php echo esc_attr($product_image_id); ?>">
                    <button type="button" class="upload_image_button button">Upload Image</button>
                    <div class="product_image_preview">
                        <?php if ($product_image_id) echo wp_get_attachment_image($product_image_id, 'thumbnail'); ?>
                    </div>
                </p>
                <p>
                    <label>Effectiveness:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][effectiveness]" value="<?php echo esc_attr($effectiveness); ?>">
                </p>
                <p>
                    <label>Safety:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][safety]" value="<?php echo esc_attr($safety); ?>">
                </p>
                <p>
                    <label>Price:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][price]" value="<?php echo esc_attr($price); ?>">
                </p>
                <p>
                    <label>Overall Rating:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][overall_rating]" value="<?php echo esc_attr($overall_rating); ?>">
                </p>
                <p>
                    <label>Product Description:</label><br>
                    <textarea name="product_reviews[<?php echo $i; ?>][product_description]" rows="4" cols="50"><?php echo esc_textarea($product_description); ?></textarea>
                </p>
            </div>
            <?php
        }
        ?>
    </div>
    <p>
        <label for="conclusion">Conclusion:</label><br>
        <textarea id="conclusion" name="conclusion" rows="4" cols="50"><?php echo esc_textarea($conclusion); ?></textarea>
    </p>
    <p>
        <label for="cta_text">CTA Text:</label><br>
        <input type="text" id="cta_text" name="cta_text" value="<?php echo esc_attr($cta_text); ?>">
    </p>
    <p>
        <label for="cta_link">CTA Link:</label><br>
        <input type="url" id="cta_link" name="cta_link" value="<?php echo esc_url($cta_link); ?>">
    </p>
    <script>
    jQuery(document).ready(function($) {
        function updateProductReviews() {
            var numProducts = $('#num_products').val();
            var currentReviews = $('#product_reviews .product-review').length;

            if (numProducts > currentReviews) {
                for (var i = currentReviews; i < numProducts; i++) {
                    var newReview = `
                        <div class="product-review" ${i === 0 ? 'style="border: 2px solid #007cba; padding: 10px;"' : ''}>
                            <h4>Product ${i + 1}${i === 0 ? ' (Best Product)' : ''}</h4>
                            <p>
                                <label>Product Name:</label><br>
                                <input type="text" name="product_reviews[${i}][product_name]">
                            </p>
                            <p>
                                <label>Product Image:</label><br>
                                <input type="hidden" name="product_reviews[${i}][product_image_id]">
                                <button type="button" class="upload_image_button button">Upload Image</button>
                                <div class="product_image_preview"></div>
                            </p>
                            <p>
                                <label>Effectiveness:</label><br>
                                <input type="text" name="product_reviews[${i}][effectiveness]">
                            </p>
                            <p>
                                <label>Safety:</label><br>
                                <input type="text" name="product_reviews[${i}][safety]">
                            </p>
                            <p>
                                <label>Price:</label><br>
                                <input type="text" name="product_reviews[${i}][price]">
                            </p>
                            <p>
                                <label>Overall Rating:</label><br>
                                <input type="text" name="product_reviews[${i}][overall_rating]">
                            </p>
                            <p>
                                <label>Product Description:</label><br>
                                <textarea name="product_reviews[${i}][product_description]" rows="4" cols="50"></textarea>
                            </p>
                        </div>
                    `;
                    $('#product_reviews').append(newReview);
                }
            } else if (numProducts < currentReviews) {
                $('#product_reviews .product-review').slice(numProducts).remove();
            }
        }

        $('#num_products').on('change', updateProductReviews);

        $(document).on('click', '.upload_image_button', function() {
            var button = $(this);
            var custom_uploader = wp.media({
                title: 'Select Image',
                button: {
                    text: 'Use this image'
                },
                multiple: false
            }).on('select', function() {
                var attachment = custom_uploader.state().get('selection').first().toJSON();
                button.siblings('input[type="hidden"]').val(attachment.id);
                button.siblings('div').html('<img src="' + attachment.url + '" style="max-width:150px;"/>');
            }).open();
        });
    });
    </script>
    <?php
}

// Save meta box data
function save_product_review_meta($post_id) {
    if (!isset($_POST['product_review_meta_box_nonce']) || !wp_verify_nonce($_POST['product_review_meta_box_nonce'], 'product_review_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (!current_user_can('edit_post', $post_id)) {
        return;
    }

    $fields = array(
        'intro_paragraph' => 'sanitize_textarea_field',
        'main_image_id' => 'absint',
        'num_products' => 'absint',
        'product_reviews' => 'array',
        'conclusion' => 'sanitize_textarea_field',
        'cta_text' => 'sanitize_text_field',
        'cta_link' => 'esc_url_raw'
    );

    foreach ($fields as $field => $sanitize_callback) {
        if (isset($_POST[$field])) {
            $value = $_POST[$field];
            if ($sanitize_callback === 'array') {
                $sanitized_value = array();
                foreach ($value as $key => $item) {
                    $sanitized_value[$key] = array_map('sanitize_text_field', $item);
                }
            } else {
                $sanitized_value = $sanitize_callback($value);
            }
            update_post_meta($post_id, "_$field", $sanitized_value);
        }
    }
}
add_action('save_post', 'save_product_review_meta');
root@ip-172-31-16-243:/var/www/wordpress/public_html/wp-content/themes/vitality-guide# vi functions.php
root@ip-172-31-16-243:/var/www/wordpress/public_html/wp-content/themes/vitality-guide# vi functions.php
root@ip-172-31-16-243:/var/www/wordpress/public_html/wp-content/themes/vitality-guide# cat functions.php
<?php
if (!defined('ABSPATH')) {
    die('Direct access forbidden.');
}

// Enable WordPress debug logging
if (!defined('WP_DEBUG_LOG')) {
    define('WP_DEBUG_LOG', true);
}

function log_message($message) {
    error_log(date('[Y-m-d H:i:s] ') . $message . "\n", 3, WP_CONTENT_DIR . '/debug.log');
}

// Enqueue parent and child styles
function child_enqueue_styles() {
    wp_enqueue_style('parent-style', get_template_directory_uri() . '/style.css');
    wp_enqueue_style('child-style', get_stylesheet_uri());

    wp_enqueue_style('product-comparison-style', get_stylesheet_directory_uri() . '/product-comparison.css', array(), '1.1');
    wp_enqueue_script('product-comparison-script', get_stylesheet_directory_uri() . '/product-comparison.js', array('jquery'), '1.1', true);

    log_message("Styles enqueued: parent-style and child-style");
}
add_action('wp_enqueue_scripts', 'child_enqueue_styles');

// Enqueue product comparison styles
function enqueue_product_comparison_styles() {
    if (is_singular('post') && has_post_format('product-comparison')) {
        wp_enqueue_style('product-comparison-style', get_stylesheet_directory_uri() . '/product-comparison.css', array(), filemtime(get_stylesheet_directory() . '/product-comparison.css'));
        log_message("Product comparison styles enqueued for post ID: " . get_the_ID());
    }
}
add_action('wp_enqueue_scripts', 'enqueue_product_comparison_styles');

// Register product comparison template
function register_product_comparison_template($templates) {
    $templates['single-product-comparison.php'] = 'Product Comparison';
    log_message("Product comparison template registered");
    return $templates;
}
add_filter('theme_post_templates', 'register_product_comparison_template');

function register_multiproduct_template($templates) {
    $templates['single-multiproduct.php'] = 'MultiProduct';
    log_message("MultiProduct template registered");
    return $templates;
}
add_filter('theme_post_templates', 'register_multiproduct_template');

// Register product review template
function register_product_review_template($templates) {
    $templates['page-product-review.php'] = 'Product Review';
    log_message("Product review template registered");
    return $templates;
}
add_filter('theme_post_templates', 'register_product_review_template');

add_action('admin_menu', 'enable_custom_fields_metabox');
function enable_custom_fields_metabox() {
    add_meta_box('postcustom', 'Custom Fields', 'post_custom_meta_box', 'post', 'normal', 'high');
}

// Set template for product comparison posts
function set_custom_template($template) {
    if (is_singular('post')) {
        $template_slug = get_page_template_slug();
        if ($template_slug === 'single-product-comparison.php' || $template_slug === 'single-multiproduct.php' || $template_slug === 'page-product-review.php') {
            $new_template = locate_template(array($template_slug));
            if (!empty($new_template)) {
                log_message("Template set for post ID: " . get_the_ID() . ", Template: " . $template_slug);
                return $new_template;
            } else {
                log_message("Template not found for post ID: " . get_the_ID() . ", Template: " . $template_slug);
            }
        }
    }
    return $template;
}
add_filter('single_template', 'set_custom_template');

function enqueue_multiproduct_styles_scripts() {
    if (is_singular('post') && get_page_template_slug() === 'single-multiproduct.php') {
        wp_enqueue_style('multiproduct-style', get_stylesheet_directory_uri() . '/multiproduct.css', array(), filemtime(get_stylesheet_directory() . '/multiproduct.css'));
        wp_enqueue_script('multiproduct-script', get_stylesheet_directory_uri() . '/multiproduct.js', array('jquery'), filemtime(get_stylesheet_directory() . '/multiproduct.js'), true);
        log_message("MultiProduct styles and scripts enqueued for post ID: " . get_the_ID());
    }
}
add_action('wp_enqueue_scripts', 'enqueue_multiproduct_styles_scripts');

function register_custom_fields() {
    $custom_fields = array(
        'disclosure_top', 'Featured_Image', 'subtitle', 'benefits_nav_text',
        'ingredients_nav_text', 'top_5_nav_text', 'disclosure', 'benefits_title',
        'benefits_subtitle', 'benefits_content', 'usage_title', 'usage_content',
        'ingredients_to_look_for_title', 'ingredients_to_look_for_content',
        'ingredients_to_avoid_title', 'ingredients_to_avoid_content',
        'considerations_title', 'considerations_content', 'top_products_title',
        'num_products', 'results_disclaimer', 'citations_title', 'citations',
        'back_to_top_text', 'primary_color', 'secondary_color', 'tertiary_color'
    );

    foreach ($custom_fields as $field) {
        register_post_meta('post', $field, array(
            'show_in_rest' => true,
            'single' => true,
            'type' => 'string',
        ));
    }
    // Register product-specific custom fields
    $product_fields = array(
        'name', 'brand', 'link', 'image', 'image_width', 'rating_image',
        'rating', 'grade', 'pros', 'cons', 'bottom_line'
    );

    for ($i = 1; $i <= 5; $i++) {
        foreach ($product_fields as $field) {
            register_post_meta('post', "product_{$i}_{$field}", array(
                'show_in_rest' => true,
                'single' => true,
                'type' => 'string',
            ));
        }
    }
}
add_action('init', 'register_custom_fields');

function handle_custom_fields($post_id, $post, $update) {
    if ($post->post_type !== 'post') {
        return;
    }
    error_log("Handling custom fields for post ID: $post_id");

    log_message("Handling custom fields for post ID: $post_id");

    // Get the raw POST data
    $raw_data = file_get_contents('php://input');
    log_message("Raw POST data: " . $raw_data);
    $data = json_decode($raw_data, true);
    log_message("Decoded data: " . print_r($data, true));

    if (isset($data['meta']) && is_array($data['meta'])) {
        foreach ($data['meta'] as $key => $value) {
            update_post_meta($post_id, $key, wp_kses_post($value));
            log_message("Updated custom field '$key' for post ID: $post_id");

            // Handle featured image
            if ($key === 'featured_image' && !empty($value)) {
                $image_id = upload_image_from_url($value, $post_id);
                if ($image_id) {
                    set_post_thumbnail($post_id, $image_id);
                    log_message("Set featured image for post ID: $post_id");
                }
            }
        }
    } else {
        log_message("No meta data found in POST for post ID: $post_id");
    }
    $all_meta = get_post_meta($post_id);
    log_message("All post meta after update: " . print_r($all_meta, true));

    // Set post format to 'product-comparison'
    set_post_format($post_id, 'product-comparison');
    log_message("Set post format to 'product-comparison' for post ID: $post_id");

    // Set template to 'single-product-comparison.php'
    update_post_meta($post_id, '_wp_page_template', 'single-product-comparison.php');
    log_message("Set template to 'single-product-comparison.php' for post ID: $post_id");
}
add_action('rest_api_inserted_post', 'handle_custom_fields', 10, 3);

function upload_image_from_url($image_url, $post_id) {
    require_once(ABSPATH . 'wp-admin/includes/media.php');
    require_once(ABSPATH . 'wp-admin/includes/file.php');
    require_once(ABSPATH . 'wp-admin/includes/image.php');

    // Download file to temp dir
    $tmp = download_url($image_url);

    if (is_wp_error($tmp)) {
        log_message("Error downloading image: " . $tmp->get_error_message());
        return false;
    }

    $file_array = array(
        'name' => basename($image_url),
        'tmp_name' => $tmp
    );

    // Do the validation and storage stuff
    $id = media_handle_sideload($file_array, $post_id);

    // If error storing permanently, unlink
    if (is_wp_error($id)) {
        @unlink($file_array['tmp_name']);
        log_message("Error storing image: " . $id->get_error_message());
        return false;
    }

    return $id;
}

// Add product comparison format
function add_product_comparison_format() {
    add_theme_support('post-formats', array('product-comparison'));
    log_message("Product comparison post format added");
}
add_action('after_setup_theme', 'add_product_comparison_format');

// Helper function to get custom field with fallback
function get_custom_field($field, $fallback = '') {
    $value = get_post_meta(get_the_ID(), $field, true);
    log_message("Retrieved custom field '$field' for post ID: " . get_the_ID());
    return !empty($value) ? $value : $fallback;
}

// Log when a product comparison post is loaded
function log_product_comparison_post_load() {
    if (is_singular('post') && has_post_format('product-comparison')) {
        $post_id = get_the_ID();
        $template = get_page_template_slug($post_id);
        log_message("Product comparison post loaded - ID: {$post_id}, Template: {$template}");
    }
}
add_action('wp', 'log_product_comparison_post_load');

// Enqueue product review styles
function enqueue_product_review_styles() {
    if (is_singular('post') && get_page_template_slug() === 'page-product-review.php') {
        wp_enqueue_style('product-review-style', get_stylesheet_directory_uri() . '/product-review.css', array(), filemtime(get_stylesheet_directory() . '/product-review.css'));
        log_message("Product review styles enqueued for post ID: " . get_the_ID());
    }
}
add_action('wp_enqueue_scripts', 'enqueue_product_review_styles');

// Add meta boxes for custom fields
function add_product_review_meta_boxes() {
    add_meta_box('product_review_meta', 'Product Review Details', 'product_review_meta_callback', 'post', 'normal', 'high');
}
add_action('add_meta_boxes', 'add_product_review_meta_boxes');


// Meta box callback function
function product_review_meta_callback($post) {
    wp_nonce_field('product_review_meta_box', 'product_review_meta_box_nonce');

    $intro = get_post_meta($post->ID, '_intro_paragraph', true);
    $main_image_id = get_post_meta($post->ID, '_main_image_id', true);
    $num_products = get_post_meta($post->ID, '_num_products', true) ?: 5;
    $product_reviews = get_post_meta($post->ID, '_product_reviews', true) ?: array();
    $conclusion = get_post_meta($post->ID, '_conclusion', true);
    $cta_text = get_post_meta($post->ID, '_cta_text', true);
    $cta_link = get_post_meta($post->ID, '_cta_link', true);

    ?>
    <p>
        <label for="intro_paragraph">Intro Paragraph:</label><br>
        <textarea id="intro_paragraph" name="intro_paragraph" rows="4" cols="50"><?php echo esc_textarea($intro); ?></textarea>
    </p>
    <p>
        <label for="main_image">Main Image:</label><br>
        <input type="hidden" id="main_image_id" name="main_image_id" value="<?php echo esc_attr($main_image_id); ?>">
        <button type="button" class="upload_image_button button">Upload Image</button>
        <div id="main_image_preview">
            <?php if ($main_image_id) echo wp_get_attachment_image($main_image_id, 'thumbnail'); ?>
        </div>
    </p>
    <p>
        <label for="num_products">Number of Products:</label>
        <input type="number" id="num_products" name="num_products" value="<?php echo esc_attr($num_products); ?>" min="1" max="10">
    </p>
    <div id="product_reviews">
        <h3>Product Reviews</h3>
        <?php
        for ($i = 0; $i < $num_products; $i++) {
            $review = isset($product_reviews[$i]) ? $product_reviews[$i] : array();
            $product_name = isset($review['product_name']) ? $review['product_name'] : '';
            $product_image_id = isset($review['product_image_id']) ? $review['product_image_id'] : '';
            $effectiveness = isset($review['effectiveness']) ? $review['effectiveness'] : '';
            $safety = isset($review['safety']) ? $review['safety'] : '';
            $price = isset($review['price']) ? $review['price'] : '';
            $overall_rating = isset($review['overall_rating']) ? $review['overall_rating'] : '';
            $product_description = isset($review['product_description']) ? $review['product_description'] : '';
            ?>
            <div class="product-review" <?php echo $i === 0 ? 'style="border: 2px solid #007cba; padding: 10px;"' : ''; ?>>
                <h4>Product <?php echo $i + 1; ?><?php echo $i === 0 ? ' (Best Product)' : ''; ?></h4>
                <p>
                    <label>Product Name:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][product_name]" value="<?php echo esc_attr($product_name); ?>">
                </p>
                <p>
                    <label>Product Image:</label><br>
                    <input type="hidden" name="product_reviews[<?php echo $i; ?>][product_image_id]" value="<?php echo esc_attr($product_image_id); ?>">
                    <button type="button" class="upload_image_button button">Upload Image</button>
                    <div class="product_image_preview">
                        <?php if ($product_image_id) echo wp_get_attachment_image($product_image_id, 'thumbnail'); ?>
                    </div>
                </p>
                <p>
                    <label>Effectiveness:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][effectiveness]" value="<?php echo esc_attr($effectiveness); ?>">
                </p>
                <p>
                    <label>Safety:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][safety]" value="<?php echo esc_attr($safety); ?>">
                </p>
                <p>
                    <label>Price:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][price]" value="<?php echo esc_attr($price); ?>">
                </p>
                <p>
                    <label>Overall Rating:</label><br>
                    <input type="text" name="product_reviews[<?php echo $i; ?>][overall_rating]" value="<?php echo esc_attr($overall_rating); ?>">
                </p>
                <p>
                    <label>Product Description:</label><br>
                    <textarea name="product_reviews[<?php echo $i; ?>][product_description]" rows="4" cols="50"><?php echo esc_textarea($product_description); ?></textarea>
                </p>
            </div>
            <?php
        }
        ?>
    </div>
    <p>
        <label for="conclusion">Conclusion:</label><br>
        <textarea id="conclusion" name="conclusion" rows="4" cols="50"><?php echo esc_textarea($conclusion); ?></textarea>
    </p>
    <p>
        <label for="cta_text">CTA Text:</label><br>
        <input type="text" id="cta_text" name="cta_text" value="<?php echo esc_attr($cta_text); ?>">
    </p>
    <p>
        <label for="cta_link">CTA Link:</label><br>
        <input type="url" id="cta_link" name="cta_link" value="<?php echo esc_url($cta_link); ?>">
    </p>
    <script>
    jQuery(document).ready(function($) {
        function updateProductReviews() {
            var numProducts = $('#num_products').val();
            var currentReviews = $('#product_reviews .product-review').length;
            
            if (numProducts > currentReviews) {
                for (var i = currentReviews; i < numProducts; i++) {
                    var newReview = `
                        <div class="product-review" ${i === 0 ? 'style="border: 2px solid #007cba; padding: 10px;"' : ''}>
                            <h4>Product ${i + 1}${i === 0 ? ' (Best Product)' : ''}</h4>
                            <p>
                                <label>Product Name:</label><br>
                                <input type="text" name="product_reviews[${i}][product_name]">
                            </p>
                            <p>
                                <label>Product Image:</label><br>
                                <input type="hidden" name="product_reviews[${i}][product_image_id]">
                                <button type="button" class="upload_image_button button">Upload Image</button>
                                <div class="product_image_preview"></div>
                            </p>
                            <p>
                                <label>Effectiveness:</label><br>
                                <input type="text" name="product_reviews[${i}][effectiveness]">
                            </p>
                            <p>
                                <label>Safety:</label><br>
                                <input type="text" name="product_reviews[${i}][safety]">
                            </p>
                            <p>
                                <label>Price:</label><br>
                                <input type="text" name="product_reviews[${i}][price]">
                            </p>
                            <p>
                                <label>Overall Rating:</label><br>
                                <input type="text" name="product_reviews[${i}][overall_rating]">
                            </p>
                            <p>
                                <label>Product Description:</label><br>
                                <textarea name="product_reviews[${i}][product_description]" rows="4" cols="50"></textarea>
                            </p>
                        </div>
                    `;
                    $('#product_reviews').append(newReview);
                }
            } else if (numProducts < currentReviews) {
                $('#product_reviews .product-review').slice(numProducts).remove();
            }
        }

        $('#num_products').on('change', updateProductReviews);

        $(document).on('click', '.upload_image_button', function() {
            var button = $(this);
            var custom_uploader = wp.media({
                title: 'Select Image',
                button: {
                    text: 'Use this image'
                },
                multiple: false
            }).on('select', function() {
                var attachment = custom_uploader.state().get('selection').first().toJSON();
                button.siblings('input[type="hidden"]').val(attachment.id);
                button.siblings('div').html('<img src="' + attachment.url + '" style="max-width:150px;"/>');
            }).open();
        });
    });
    </script>
    <?php
}

// Save meta box data
function save_product_review_meta($post_id) {
    log_message("Attempting to save product review meta for post ID: " . $post_id);

    if (!isset($_POST['product_review_meta_box_nonce']) || !wp_verify_nonce($_POST['product_review_meta_box_nonce'], 'product_review_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (!current_user_can('edit_post', $post_id)) {
        return;
    }

    $fields = ['num_products', 'cta_text', 'cta_link'];
    foreach ($fields as $field) {
        if (isset($_POST[$field])) {
            update_post_meta($post_id, "_{$field}", sanitize_text_field($_POST[$field]));
        }
    }

    // Save rich text fields
    $rich_text_fields = ['intro_paragraph', 'conclusion'];
    foreach ($rich_text_fields as $field) {
        if (isset($_POST[$field])) {
            update_post_meta($post_id, "_{$field}", wp_kses_post($_POST[$field]));
        }
    }

    $num_products = intval($_POST['num_products']) ?: 5;
    for ($i = 1; $i <= $num_products; $i++) {
        $product_fields = ['name', 'effectiveness', 'safety', 'price', 'rating', 'image'];
        foreach ($product_fields as $field) {
            $key = "product_{$i}_{$field}";
            if (isset($_POST[$key])) {
                if ($field === 'image') {
                    update_post_meta($post_id, "_{$key}", esc_url_raw($_POST[$key]));
                } else {
                    update_post_meta($post_id, "_{$key}", sanitize_text_field($_POST[$key]));
                }
            }
        }
        
        // Save product description as rich text
        $description_key = "product_{$i}_description";
        if (isset($_POST[$description_key])) {
            update_post_meta($post_id, "_{$description_key}", wp_kses_post($_POST[$description_key]));
        }
    }

    log_message("Product review meta saved for post ID: " . $post_id);
}

add_action('save_post', 'save_product_review_meta');

